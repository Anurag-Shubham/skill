openapi: 3.0.3
info:
  title: Skill portal
  description: >-
    This is a sample Skill  Server based on the OpenAPI 3.0 specification. 
  version: 1.0.11
servers:
  - url: http://localhost:8080/api/v1
tags:
  - name: user
    description: User operations
  - name: Project
    description: Project operations
  - name: Tech
    description: Tech operations
  - name: Common
    description: Common operations 
  - name: Authentication
    description: Authentication
  - name: Signup
    description: User Registration
  
  
paths:
  /tech:
    get:
      tags:
        - Tech
      summary: Returns all Tech 
      description: ' '
      operationId: getAllTech
      responses:
        200:
          description: List of all Tech
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tech'
     
    post:
      tags:
        - Tech
      summary: Add a new tech to the DB
      description: This can only be done by the logged in Admin.
      operationId: addNewTech
      requestBody:
        description: Create a new tech in the DB
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tech'
          application/xml:
            schema:
              $ref: '#/components/schemas/Tech'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tech'
        required: true
      responses:
        '201':
          description: New tech added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tech'
            application/xml:
              schema:
                $ref: '#/components/schemas/Tech'
        '405':
          description: Invalid input
      
  
  /tech/{techId}:
    get:
      tags:
        - Tech
      summary: Find tech by ID
      description: Returns a single tech
      operationId: getTechById
      parameters:
        - name: techId
          in: path
          description: ID of tech to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tech'
            application/xml:
              schema:
                $ref: '#/components/schemas/Tech'
        '400':
          description: Invalid ID supplied
        '404':
          description: Tech not found
     
    put:
      tags:
        - Tech
      summary: Updates a tech in the DB with form data
      description: This can only be done by the logged in Admin.
      operationId: updateTechById
      parameters:
        - name: techId
          in: path
          description: ID of tech that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tech'
          application/xml:
            schema:
              $ref: '#/components/schemas/Tech'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tech'
      responses:
        '200':
          description: Tech updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tech'
            application/xml:
              schema:
                $ref: '#/components/schemas/Tech'
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/Tech'
        '405':
          description: Invalid input
     
    delete:
      tags:
        - Tech
      summary: Deletes a tech
      description: This can only be done by the logged in Admin.
      operationId: deleteTechById
      parameters:
        - name: techId
          in: path
          description: Tech id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '202':
          description: Deleted Successfully
        '400':
          description: Invalid tech value
        '404':
          description: Tech not found
      
  
  /project:
    get:
      tags:
        - Project
      summary: Returns all project 
      description: ' '
      operationId: getAllProject
      responses:
        200:
          description: List of all Project
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
                  
    post:
      tags:
        - Project
      summary: create new Project in DB
      description: This can only be done by the logged in User.
      operationId: createNewTeam
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
          application/xml:
            schema:
              $ref: '#/components/schemas/Project'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '201':
          description: New Project added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
            application/xml:
              schema:
                $ref: '#/components/schemas/Project'
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/Project'
        '405':
          description: Invalid input
    
          
  /project/{projectId}:
    get:
      tags:
        - Project
      summary: Find Project by Project ID
      description: ' '
      operationId: getProjectById
      parameters:
        - name: projectId
          in: path
          description: ID of Proect that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
            application/xml:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Invalid ID supplied
        '404':
          description: Project not found
    
    put:
      tags:
        - Project
      summary: Updates a Project in the DB
      description: This can only be done by the logged in User.
      operationId: updateProjectById
      parameters:
        - name: projectId
          in: path
          description: ID of project that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
          application/xml:
            schema:
              $ref: '#/components/schemas/Project'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '200':
          description: Project updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
            application/xml:
              schema:
                $ref: '#/components/schemas/Project'
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/Project'
        '405':
          description: Invalid input

    delete:
      tags:
        - Project
      summary: Delete Project by ID
      description: This can only be done by the logged in Admin.
      operationId: deleteTeam
      parameters:
        - name: projectId
          in: path
          description: ID of the Team that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '202':
          description: Deleted Successfully
        '400':
          description: Invalid ID supplied
        '404':
          description: Project not found
          
  /project/{projectId}/users:
    get:
      tags:
        - Project
      summary: Retrieve all users for a specific project
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '400':
          description: Invalid projectId supplied
        '404':
          description: Users not found
          
  /project/{projectId}/tech:
    get:
      tags:
        - Project
      summary: Retrieve all Tech for a specific project
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Tech retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '400':
          description: Invalid projectId supplied
        '404':
          description: Tech not found
                  
  /project/tech/{techName}:
    get:
      tags:
       - Project
      summary: Retrieve all project that use a specific technology
      parameters:
        - name: techName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Projects retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '400':
          description: Invalid techName supplied
        '404':
          description: Project not found

  /userProject:
    post:
      tags:
        - Common
      summary: Add a new user to a project
      description: ' '
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProject'
          application/xml:
              schema:
                $ref: '#/components/schemas/UserProject'
          application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/UserProject'
      responses:
        '201':
          description: User added to project successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProject'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserProject'
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/UserProject'
        '405':
          description: Invalid Input
                
  /userProject/{userId}/{projectId}:
    put:
      tags:
        - Common
      summary: Update an existing user's Project assignment
      description: This can only be done by the logged in User.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: projectId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProject'
      responses:
        '200':
          description: User's Project assignment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProject'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserProject'
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/UserProject'
        '405':
          description: Invalid input
  /projectTech:
    post:
      tags:
        - Common
      summary: Add a new Tech to a project
      description: ' '
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProject'
          application/xml:
              schema:
                $ref: '#/components/schemas/UserProject'
          application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/UserProject'
      responses:
        '201':
          description: Tech added to project successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProject'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserProject'
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/UserProject'
        '405':
          description: Invalid Input
                
  /projectTech/{projectId}/{techId}:
    put:
      tags:
        - Common
      summary: Update an existing Project's tech assignment
      description: This can only be done by the logged as Lead.
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: techId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProject'
      responses:
        '200':
          description:  Project's tech assignment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProject'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserProject'
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/UserProject'
        '405':
          description: Invalid input           
  /userTech:
    post:
      tags:
        - Common
      summary: Add a new technology to a user
      description: This can only be done by the logged in user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/UserTech'
          application/xml:
            schema:
                $ref: '#/components/schemas/UserTech'
          application/x-www-form-urlencoded:
            schema:
                $ref: '#/components/schemas/UserTech'
              
      responses:
        '201':
          description: Technology added to user successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTech'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserTech'
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/UserTech'
        '405':
          description: Invalid Input
                
  /userTech/{userId}/{techId}:
    put:
      tags:
        - Common
      summary: Update an existing user's technology assignment
      description: This can only be done by the logged in user.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: techId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserTech'
      responses:
        '200':
          description: User's technology assignment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTech'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserTech'
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/UserTech'
        '405':
          description: Invalid input

  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: New user added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/User'
        '405':
          description: Invalid Input
    get:
      tags:
        - user
      summary: Returns all users 
      description: ' '
      operationId: getUsers
      responses:
        200:
          description: List of all Tech
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    
          
  /user/{userId}:
    get:
      tags:
        - user
      summary: Get user by user Id
      description: ''
      operationId: getUserByName
      parameters:
        - name: userId
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid userId supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: integer
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/User'
        '405':
          description: Invalid input

    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in Admin.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: integer
      responses:
        '202':
          description: Deleted Successfully
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
          
  /user/{userId}/tech:
    get:
      tags:
        - user
      summary: Retrieve all technologies for a specific user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Technologies retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tech'
                  
  /user/tech/{techName}:
    get:
      tags: 
       - user
      summary: Retrieve all users who have worked on a specific technology
      parameters:
        - name: techName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
                  
                  
  /login:
    post:
      tags:
        - Authentication
      parameters:
        - name: email
          in: query
          schema:
            type: string
        - name: password
          in: query
          schema:
            type: string
      responses:
        200:
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  logoutTime:
                    type: string
        400:
          description: Invalid email or password
          
  /logout:
    post:
      tags:
        - Authentication
     
      responses:
        200:
          description: Successful logout
        400:
          description: Invalid logout key or key expired

  /signup:
    post:
      tags:
        - Signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
               $ref: '#/components/schemas/UserCredentials'
          application/xml:
            schema:
                $ref: '#/components/schemas/UserCredentials'
          application/x-www-form-urlencoded:
            schema:
                $ref: '#/components/schemas/UserCredentials'
               
      responses:
        201:
          description: Successful signup
        400:
          description: Invalid request body or email already exists
        
components:
  schemas:
    Project:
      type: object
      properties:
        teamId:
          type: integer
          format: UUID
          example: 100000
        teamName:
          type: string
          example: fehguy
        leadName:
          type: string
          example: Alok
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        description:
          type: string
          example: qwertyuiop
      xml:
        name: Team
    Tech:
      type: object
      properties:
        techId:
          type: integer
          format: UUID
          example: 1
        techname:
          type: string
          example: Java
        techType:
          type: string
          example: Framework
          description: Tech Type
          enum:
            - Framework
            - Library
            - Others
      xml:
        name: category
    User:
      type: object
      properties:
        userId:
          type: integer
          format: UUID
          example: 10
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        JobTitle:
          type: string
          example: 'Developer'
        phone:
          type: string
          example: '12345'
        status:
          type: string
          description: User Status
          example: Active
          enum:
            - Active
            - Inactive
      xml:
        name: user
    UserCredentials:
      type: object
      properties:
        accountId:
          type: integer
          format: uuid
          example: x1qwertyu
        UserId:
          type: integer
          format: uuid
          example: ag@x1qwertyu
        password:
          type: string
          example: '12345'
        isActive:
          type: boolean
          example: 'true'
        lastPasswordReset:
          type: string
          format: date
      xml:
        name: userCredentials
    Sessions:
      type: object
      properties:
        SessionID:
          type: integer
          format: uuid
          example: x1qwertyu
        UserId:
          type: integer
          format: uuid
          example: ag@x1qwertyu
        LoginTime:
          type: string
          format: date
        LogoutTime:
          type: string
          format: date
      xml:
        name: Sessions
    ForgetPassword:
      type: object
      properties:
        ForgetPasswordID:
          type: integer
          format: uuid
          example: x1qwertyu
        UserId:
          type: integer
          format: uuid
          example: ag@x1qwertyu
        ResetToken:
          type: integer
          format: uuid
          example: aqwertyu
        ExpirationDate:
          type: string
          format: date
      xml:
        name: Sessions
    UserTech:
      type: object
      properties:
        id:
          type: integer
          format: UUID
          example: 100000
        userId:
          type: integer
          format: UUID
          example: 100001
        techId:
          type: integer
          format: UUID
          example: 100000
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
      xml:
        name: UserTech
    UserProject:
      type: object
      properties:
        id:
          type: integer
          format: UUID
          example: 100000
        userId:
          type: integer
          format: UUID
          example: 100001
        teamId:
          type: integer
          format: UUID
          example: 100000
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
      xml:
        name: UserProject
    